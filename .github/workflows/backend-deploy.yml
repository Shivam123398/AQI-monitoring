name: Backend Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  BACKEND_DIR: './backend'

jobs:
  # ============================================================================
  # JOB 1: Code Quality & Testing
  # ============================================================================
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aeroguard_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci

      - name: Run linter
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run lint

      - name: TypeScript check
        working-directory: ${{ env.BACKEND_DIR }}
        run: npx tsc --noEmit

      - name: Setup test database
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aeroguard_test
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: Run tests
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aeroguard_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-ci
          API_KEY_SALT: test-api-key-salt
          NODE_ENV: test
        run: npm test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ${{ env.BACKEND_DIR }}/coverage/coverage-final.json
          flags: backend
          name: backend-coverage

  # ============================================================================
  # JOB 2: Build
  # ============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ${{ env.BACKEND_DIR }}
        run: npx prisma generate

      - name: Build TypeScript
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: |
            ${{ env.BACKEND_DIR }}/dist
            ${{ env.BACKEND_DIR }}/node_modules
            ${{ env.BACKEND_DIR }}/package.json
            ${{ env.BACKEND_DIR }}/package-lock.json
            ${{ env.BACKEND_DIR }}/prisma
          retention-days: 1

  # ============================================================================
  # JOB 3: Deploy to Staging (Develop Branch)
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://api-staging.aeroguard.ai
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: ${{ env.BACKEND_DIR }}

      - name: Deploy to Render (Staging)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_STAGING: ${{ secrets.RENDER_SERVICE_ID_STAGING }}
        run: |
          curl --request POST \
            --url https://api.render.com/v1/services/$RENDER_SERVICE_ID_STAGING/deploys \
            --header 'Authorization: Bearer '$RENDER_API_KEY \
            --header 'Content-Type: application/json' \
            --data '{"clearCache": false}'

      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api-staging.aeroguard.ai/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Staging deployment successful!"
          else
            echo "‚ùå Staging deployment health check failed (HTTP $response)"
            exit 1
          fi

  # ============================================================================
  # JOB 4: Deploy to Production (Main Branch)
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.aeroguard.ai
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: ${{ env.BACKEND_DIR }}

      # Option 1: Deploy to Render
      - name: Deploy to Render (Production)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_PROD: ${{ secrets.RENDER_SERVICE_ID_PROD }}
        run: |
          curl --request POST \
            --url https://api.render.com/v1/services/$RENDER_SERVICE_ID_PROD/deploys \
            --header 'Authorization: Bearer '$RENDER_API_KEY \
            --header 'Content-Type: application/json' \
            --data '{"clearCache": false}'

      # Option 2: Deploy to Railway (alternative - comment out Render if using this)
      # - name: Deploy to Railway (Production)
      #   uses: berviantoleo/railway-deploy@main
      #   with:
      #     railway_token: ${{ secrets.RAILWAY_TOKEN }}
      #     service: backend
      #     environment: production

      # Option 3: Deploy to Vercel (serverless - alternative)
      # - name: Deploy to Vercel
      #   uses: amondnet/vercel-action@v25
      #   with:
      #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
      #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
      #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
      #     working-directory: ${{ env.BACKEND_DIR }}
      #     vercel-args: '--prod'

      - name: Run database migrations
        working-directory: ${{ env.BACKEND_DIR }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
        run: |
          npx prisma migrate deploy

      - name: Wait for deployment
        run: sleep 90

      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api.aeroguard.ai/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Production deployment successful!"
          else
            echo "‚ùå Production deployment health check failed (HTTP $response)"
            exit 1
          fi

      - name: Smoke tests
        run: |
          # Test /health endpoint
          curl -f https://api.aeroguard.ai/health || exit 1
          
          # Test /devices endpoint (public)
          curl -f https://api.aeroguard.ai/api/v1/devices || exit 1
          
          echo "‚úÖ All smoke tests passed!"

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "üöÄ Backend deployed to production successfully!",
              attachments: [{
                color: 'good',
                text: `Deployment completed for commit ${process.env.AS_COMMIT} by ${process.env.AS_AUTHOR}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "‚ùå Backend deployment to production failed!",
              attachments: [{
                color: 'danger',
                text: `Deployment failed for commit ${process.env.AS_COMMIT}. Check GitHub Actions logs.`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # JOB 5: Database Backup (Production Only)
  # ============================================================================
  backup-database:
    name: Backup Production Database
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Backup PostgreSQL
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          S3_BUCKET: aeroguard-backups
        run: |
          # Extract DB credentials from DATABASE_URL
          DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\(.*\):.*/\1/p')
          DB_NAME=$(echo $DATABASE_URL | sed -n 's/.*\/\(.*\)?.*/\1/p' | cut -d'?' -f1)
          DB_USER=$(echo $DATABASE_URL | sed -n 's/.*:\/\/\(.*\):.*/\1/p')
          DB_PASS=$(echo $DATABASE_URL | sed -n 's/.*:\/\/.*:\(.*\)@.*/\1/p')
          
          # Create backup
          BACKUP_FILE="backup-$(date +%Y%m%d-%H%M%S).sql"
          PGPASSWORD=$DB_PASS pg_dump -h $DB_HOST -U $DB_USER -d $DB_NAME > $BACKUP_FILE
          
          # Compress
          gzip $BACKUP_FILE
          
          # Upload to S3
          aws s3 cp ${BACKUP_FILE}.gz s3://${S3_BUCKET}/postgres/${BACKUP_FILE}.gz
          
          echo "‚úÖ Database backup completed: ${BACKUP_FILE}.gz"

  # ============================================================================
  # JOB 6: Security Scan
  # ============================================================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm audit --production --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ env.BACKEND_DIR }}/package.json

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'AeroGuard Backend'
          path: ${{ env.BACKEND_DIR }}
          format: 'HTML'
        continue-on-error: true

      - name: Upload dependency check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports